#!/bin/bash
set -Eeo pipefail
#set -x

# TODO: SSH Server with Password or PEM
# TODO: Allow/Disallow Root login

# shellcheck disable=2154
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR

reArgsMaybe="^[^:[:space:]]+:.*$" # Smallest indication of attempt to use argument
reArgSkip='^([[:blank:]]*#.*|[[:blank:]]*)$' # comment or empty line

function log() {
    echo "[$0] $*" >&2
}

FILESDIR="/usr/local/debian-base-setup/files"
COPY () {
    cp -a "$FILESDIR/$1" "$2"
}

if [ "$DEBBASE_SSH" = "enabled" ]; then
        echo "SSH server enabled; unset DEBBASE_SSH to disable"

        # TODO: Check custom configs

        COPY sshd_config /etc/ssh/sshd_config
        COPY ssh_config /etc/ssh/ssh_config

        # SSH login fix. Otherwise user is kicked off after login
        #sed 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' -i /etc/pam.d/sshd

        echo 'root:docker' | chpasswd

        update-rc.d ssh enable

        # Generate unique ssh keys for this container, if needed
        if [ ! -f /etc/ssh/ssh_host_ed25519_key ]; then
            ssh-keygen -t ed25519 -f /etc/ssh/ssh_host_ed25519_key -N ''
        fi

        if [ ! -f /etc/ssh/ssh_host_rsa_key ]; then
            ssh-keygen -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key -N ''
        fi

        startSshd=true

        # Paths
        userConfPath="/etc/openssh/users.conf"
        userConfPathLegacy="/etc/docker-users.conf"
        userConfFinalPath="/var/run/ssh-docker/users.conf"

        # Backward compatibility with legacy config path
        if [ ! -f "$userConfPath" ] && [ -f "$userConfPathLegacy" ]; then
            mkdir -p "$(dirname $userConfPath)"
            ln -s "$userConfPathLegacy" "$userConfPath"
        fi

        # Create users only on first run
        if [ ! -f "$userConfFinalPath" ]; then
            mkdir -p "$(dirname $userConfFinalPath)"

            if [ -f "$userConfPath" ]; then
                # Append mounted config to final config
                grep -v -E "$reArgSkip" < "$userConfPath" > "$userConfFinalPath"
            fi

            if [ -n "$SSH_USERS" ]; then
                # Append users from environment variable to final config
                IFS=" " read -r -a usersFromEnv <<< "$SSH_USERS"
                for user in "${usersFromEnv[@]}"; do
                    echo "$user" >> "$userConfFinalPath"
                done
            fi

            # Check that we have users in config
            if [ -f "$userConfFinalPath" ] && [ "$(wc -l < "$userConfFinalPath")" -gt 0 ]; then
                # Import users from final conf file
                while IFS= read -r user || [[ -n "$user" ]]; do
                    create-ssh-user "$user"
                done < "$userConfFinalPath"
            elif $startSshd; then
                log "NOTICE: No additional users provided!"
            fi
        fi

        # Source custom scripts, if any
        if [ -d /etc/sftp.d ]; then
            for f in /etc/sftp.d/*; do
                if [ -x "$f" ]; then
                    log "Running $f ..."
                    $f
                else
                    log "Could not run $f, because it's missing execute permission (+x)."
                fi
            done
            unset f
        fi

        log "Executing sshd"
        exec /usr/sbin/sshd -D -e
else
        echo "SSH server disabled; set DEBBASE_SSH=enabled to enable"
        update-rc.d ssh disable &> /dev/null
fi
