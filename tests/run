#!/bin/bash
# See: https://github.com/kward/shunit2

LFUNC='\033[0;33m'
LBLUE='\033[1;34m'
NC='\033[0m'

if [ $UID != 0 ] && ! groups | grep -qw docker; then
    echo "Run with sudo/root or add user $USER to group 'docker'"
    exit 1
fi

argBuild=${1:-"build"}
argOutput=${2:-"quiet"}
argCleanup=${3:-"cleanup"}

# FIXED: Working on Unix / Darwin
argOwner=${owner:-"$(id -u -n):$(id -g -n)"}

testDir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
# FIXED: MacOS with sessions enabled return error
rootDir="$( dirname "$testDir/.." | pwd )"

buildDir="${buildDir:-"$(pwd)"}"
imageName="${imageName:-"none"}"

buildOptions=(--tag "$imageName")

useTmp=1

if [ "$argOutput" == "quiet" ]; then
    redirect="/dev/null"
else
    redirect="/dev/stdout"
fi

kernel=$(uname)

# if [ "${kernel}" == "Darwin" ]; then
#     echo "MacOS System detected"
# else
#     echo "Linux System detected"
# fi

# TODO: check ssh-keygen
# TODO: print bash & docker version

if [ ! -f "$testDir/shunit2/shunit2" ]; then
    echo "Could not find shunit2 in $testDir/shunit2."
    echo "Run 'git submodules init && git submodules update'"
    exit 2
fi

# clear argument list (or shunit2 will try to use them)
set --

##############################################################################
## Helper functions
##############################################################################

function oneTimeSetUp() {
    echo -e "${LFUNC}function oneTimeSetUp()${NC}" > "$redirect" 2>&1

    if [ "$argBuild" == "build" ]; then
        buildOptions+=("--no-cache" "--pull=true")
    fi

    # Build image
    if ! docker build "${buildOptions[@]}" "$buildDir"; then
        echo "Build failed"
        exit 1
    fi

    # docker image inspect antwal/debian-stretch-*:latest --format='{{.Size}}'
}

function oneTimeTearDown() {
    echo -e "${LFUNC}function oneTimeTearDown()${NC}" > "$redirect" 2>&1

    if [ "$argCleanup" == "cleanup" ] && [ "$argBuild" == "build" ]; then
        echo "Remove image" > "$redirect" 2>&1
        docker image rm "$imageName" > "$redirect" 2>&1
    fi
}

function tearDown() {
    echo -e "${LFUNC}function tearDown()${NC}" > "$redirect" 2>&1

    retireContainer "$containerName"

    if [ "$argCleanup" == "cleanup" ] && [ -d "$containerTmpDir" ]; then
        echo "Remove build test directory : $containerTmpDir" > "$redirect" 2>&1
        rm -rf "$containerTmpDir"
    fi
}

function runContainer() {
    echo -e "${LFUNC}function runContainer()${NC}" > "$redirect" 2>&1

    runOptions="$*"

    if ! bash -c "docker run $runOptions > $redirect 2>&1"; then
        echo "Run failed"
        return 1;
    fi

    return 0;
}

function getContainerIp() {
    docker inspect -f "{{.NetworkSettings.IPAddress}}" "$1"
}

function waitForServer() {
    echo -e "${LFUNC}function waitForServer()${NC}" > "$redirect" 2>&1

    containerName="$1"
    port="$2"
    ip=""

    if [ "${kernel}" == "Darwin" ]; then
        # FIXED: MacOs can't connect directly to container host
        ip="0.0.0.0"
    else
        ip="$(getContainerIp "$containerName")"
    fi

    echo -n "Waiting for $containerName to open port $port at address $ip..." > "$redirect" 2>&1

    for _ in {1..30}; do
        sleep 1

        echo -n "."
        if [ -n "$ip" ] && nc -z "$ip" "$port"; then
            # echo " OPEN"
            return 0;
        fi
    done

    echo " TIMEOUT"
    return 1
}

function retireContainer() {
    echo -e "${LFUNC}function retireContainer()${NC}" > "$redirect" 2>&1

    # if [ "$(docker ps -qaf name="$1")" ]; then
    if [ -n "$(docker ps -qaf name="$1")" ]; then
        if [ "$argOutput" != "quiet" ]; then
            echo "Docker log for $1:"
            docker logs "$1"
        fi

        if [ "$argCleanup" == "cleanup" ]; then
            docker rm -fv "$1" > "$redirect" 2>&1
        fi
    fi
}

function setUp() {
    echo -e "${LFUNC}function setUp()${NC}" > "$redirect" 2>&1

    # shellcheck disable=SC2154
    containerName="${_shunit_test_}"
    containerTmpDir="${buildDir}/build/${containerName}"

    useTmp=${mkTmp:-$useTmp}

    if [ "${useTmp}" -eq "${SHUNIT_TRUE}" ]; then
        echo "Use Temp Folder for $containerName" > "$redirect" 2>&1

        mkdir -p "${buildDir}/build/${containerName}"
        # set permission to non root user if passed
        chown -R "$argOwner" "${buildDir}/build/"
    fi

    export containerName containerTmpDir

    retireContainer "$containerName" # clean up leftover container
}

function suite() {
    echo -e "${LFUNC}function suite()${NC}" > "$redirect" 2>&1

    if [ -f "$testDir/units/$buildDir.sh" ]; then
        echo "Include all tests unit for $buildDir" > "$redirect" 2>&1
        # TODO: SC1090: Can't follow non-constant source. Use a directive to specify location.
        . "$testDir/units/$buildDir.sh"
    else
        echo "No tests file for $buildDir" > "$redirect" 2>&1
    fi

    suite_addTest testCommonEnd
}

##############################################################################
## Commons Tests
##############################################################################

function testCommonEnd() {
    echo -e "${LBLUE}function testCommonEnd()${NC}" > "$redirect" 2>&1

    echo "Passed" > "$redirect" 2>&1
}

##############################################################################
## Run
##############################################################################

# shellcheck disable=SC1090
source "$testDir/shunit2/shunit2"
# Nothing happens after this
